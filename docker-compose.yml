version: "3.8"

services:
  youtube_downloader:
    build:
      context: ./docker/downloaders
      dockerfile: Dockerfile_youtube_downloader
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  audio_converter:
    build:
      context: ./docker/audio_processing
      dockerfile: Dockerfile_audio_converter
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  audio_normalizer:
    build:
      context: ./docker/audio_processing
      dockerfile: Dockerfile_audio_normalizer
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  audio_splitter:
    build:
      context: ./docker/audio_processing
      dockerfile: Dockerfile_audio_splitter
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  audio_trimmer:
    build:
      context: ./docker/audio_processing
      dockerfile: Dockerfile_audio_trimmer
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  transcription_service:
    build:
      context: ./docker/transcription_service
      dockerfile: Dockerfile_main_transcriber
    volumes:
      - ./data:/app/data
    environment:
      LAMBDA_IP: "your.lambda.instance.ip"
      LAMBDA_USER: "your_username"
      LAMBDA_PATH: "/path/on/lambda/instance"
    networks:
      - app_network
    restart: always

  text_loader:
    build:
      context: ./docker/nlp_pipeline
      dockerfile: Dockerfile_text_loader
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  text_segmenter:
    build:
      context: ./docker/nlp_pipeline
      dockerfile: Dockerfile_text_segmenter
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  text_tokenizer:
    build:
      context: ./docker/nlp_pipeline
      dockerfile: Dockerfile_text_tokenizer
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  ner_processor:
    build:
      context: ./docker/nlp_pipeline
      dockerfile: Dockerfile_ner_processor
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  text_saver:
    build:
      context: ./docker/nlp_pipeline
      dockerfile: Dockerfile_text_saver
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  celery_worker:
    build:
      context: ./docker/celery
      dockerfile: Dockerfile_celery_worker
    depends_on:
      - django_app
      - db
    volumes:
      - ./data:/app/data
    environment:
      DATABASE_URL: postgres://your_user:your_password@db:5432/your_db
      CELERY_BROKER_URL: ${DATABASE_URL}
      CELERY_RESULT_BACKEND: ${DATABASE_URL}
    networks:
      - app_network
    restart: always

  celery_beat:
    build:
      context: ./docker/celery
      dockerfile: Dockerfile_celery_beat
    depends_on:
      - django_app
      - db
    volumes:
      - ./data:/app/data
    environment:
      DATABASE_URL: postgres://your_user:your_password@db:5432/your_db
      CELERY_BROKER_URL: ${DATABASE_URL}
      CELERY_RESULT_BACKEND: ${DATABASE_URL}
    networks:
      - app_network
    restart: always

  dask_scheduler:
    build:
      context: ./docker/dask_worker
      dockerfile: Dockerfile_dask_scheduler
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  dask_audio_conversion_worker:
    build:
      context: ./docker/dask_worker
      dockerfile: Dockerfile_audio_conversion_worker
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  dask_ner_worker:
    build:
      context: ./docker/dask_worker
      dockerfile: Dockerfile_ner_worker
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  dask_performance_monitor_worker:
    build:
      context: ./docker/dask_worker
      dockerfile: Dockerfile_performance_monitor_worker
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  dask_pipeline_manager:
    build:
      context: ./docker/dask_worker
      dockerfile: Dockerfile_pipeline_manager
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  dask_text_loading_worker:
    build:
      context: ./docker/dask_worker
      dockerfile: Dockerfile_text_loading_worker
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  dask_text_saving_worker:
    build:
      context: ./docker/dask_worker
      dockerfile: Dockerfile_text_saving_worker
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  dask_text_segmentation_worker:
    build:
      context: ./docker/dask_worker
      dockerfile: Dockerfile_text_segmentation_worker
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  dask_text_tokenization_worker:
    build:
      context: ./docker/dask_worker
      dockerfile: Dockerfile_text_tokenization_worker
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  dask_transcription_worker:
    build:
      context: ./docker/dask_worker
      dockerfile: Dockerfile_transcription_worker
    volumes:
      - ./data:/app/data
    networks:
      - app_network
    restart: always

  django_app:
    build:
      context: ./docker/django_app
      dockerfile: Dockerfile_django
    volumes:
      - ./app:/app
    depends_on:
      - db
      - youtube_downloader
      - audio_converter
      - audio_normalizer
      - audio_splitter
      - audio_trimmer
      - transcription_service
      - text_loader
      - text_segmenter
      - text_tokenizer
      - ner_processor
      - text_saver
    environment:
      DATABASE_URL: postgres://your_user:your_password@db:5432/your_db
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
    networks:
      - app_network
    ports:
      - "8000:8000"
    restart: always

  reverse_proxy:
    build:
      context: ./docker/reverse_proxy
      dockerfile: Dockerfile_nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - django_app
    networks:
      - app_network
    restart: always

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: your_user
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app_network
    restart: always

networks:
  app_network:
    driver: bridge

volumes:
  pgdata: